var searchIndex = JSON.parse('{\
"vinylla":{"doc":"","i":[[3,"Timecode","vinylla","",null,null],[12,"bitstream","","",0,null],[12,"primary_channel","","",0,null],[12,"secondary_channel","","",0,null],[12,"direction","","",0,null],[0,"bits","","Low level bitwise operations",null,null],[5,"mask","vinylla::bits","Return 2^size - 1 that can be used as a bitmask",null,[[]]],[5,"insert_msb","","Shift all bits in `size`-bit integer `data` to the right…",null,[[]]],[5,"insert_lsb","","Shift all bits in `size`-bit integer `data` to the left…",null,[[]]],[5,"rotate_left","","Shift all bits in `size`-bit integer `data` to the left…",null,[[]]],[5,"rotate_right","","Shift all bits in `size`-bit integer `data` to the right…",null,[[]]],[0,"bitstream","vinylla","The `Bitstream` struct processes bits and maps them to…",null,null],[3,"Bitstream","vinylla::bitstream","Maps a bitstream to a position in the underlying lookup…",null,null],[12,"lookup_table","","",1,null],[12,"size","","",1,null],[12,"bitstream","","",1,null],[12,"valid_bits","","",1,null],[11,"new","","Create a timecode bitstream using a LFSR with length…",1,[[]]],[11,"process_bit","","Process a single bit in forwards direction.",1,[[]]],[11,"process_bit_backward","","Process a single bit in backwards direction.",1,[[]]],[11,"is_valid","","Returns `true` if the position is considered valid.",1,[[]]],[11,"position","","Retrieve the Position from the current bitstream.",1,[[],["option",4]]],[0,"format","vinylla","",null,null],[3,"TimecodeFormat","vinylla::format","",null,null],[12,"size","","",2,null],[12,"seed","","",2,null],[12,"taps","","",2,null],[17,"SERATO_CONTROL_CD_1_0_0","","Serato Control CD 1.0.0",null,null],[0,"lfsr","vinylla","Implementation of a Fibonacci Linear Feedback Shift…",null,null],[3,"FibonacciLfsr","vinylla::lfsr","Fibonacci Linear Feedback Shift Register (LFSR)",null,null],[12,"size","","",3,null],[12,"state","","",3,null],[12,"taps","","",3,null],[11,"next_state","","Return the next LFSR state (without making any changes).",3,[[]]],[11,"previous_state","","Return the previous LFSR state (without making any changes).",3,[[]]],[11,"advance","","Advance the LFSR state and return it.",3,[[]]],[11,"revert","","Revert the LFSR state and return it.",3,[[]]],[0,"timecode","vinylla","",null,null],[3,"TimecodeChannel","vinylla::timecode","",null,null],[12,"ewma","","",4,null],[12,"wave_cycle_status","","",4,null],[12,"samples_since_zero_crossing","","",4,null],[12,"peak_threshold","","",4,null],[3,"Timecode","","",null,null],[12,"bitstream","","",0,null],[12,"primary_channel","","",0,null],[12,"secondary_channel","","",0,null],[12,"direction","","",0,null],[4,"WaveCycleStatus","","",null,null],[13,"Positive","","",5,null],[13,"Negative","","",5,null],[4,"TimecodeDirection","","",null,null],[13,"Forwards","","",6,null],[13,"Backwards","","",6,null],[5,"sample_to_i32","","",null,[[]]],[17,"SAMPLE_RATE_HZ","","",null,null],[17,"TIME_CONSTANT","","",null,null],[18,"ZERO_CROSSING_THRESHOLD","","",4,null],[18,"INITIAL_PEAK_THRESHOLD","","",4,null],[11,"new","","",4,[[]]],[11,"has_crossed_zero","","Returns true if the wave has crossed zero.",4,[[]]],[11,"process_sample","","Process a sample and detect zero crossing.",4,[[]]],[11,"bit_from_sample","","Reads a bit from the sample and adjust the threshold.",4,[[]]],[11,"new","vinylla","",0,[[["timecodeformat",3]]]],[11,"process_channels","","",0,[[],["option",4]]],[0,"util","","Helper Utilities",null,null],[3,"ExponentialWeightedMovingAverage","vinylla::util","Discrete-time implementation of a simple RC low-pass…",null,null],[12,"last_output","","The smoothed last output.",7,null],[12,"smoothing_factor","","The smoothing factor (commonly named α in literature).…",7,null],[11,"new","","",7,[[]]],[11,"calculate_smoothing_factor","","Calculate the smoothing factor.",7,[[]]],[11,"difference_to","","Calculate the difference between the current input and…",7,[[]]],[11,"smoothen","","Calculate the next smoothed value.",7,[[]]],[11,"process","","Calculate the next smoothed value and store it.",7,[[]]],[17,"SERATO_CONTROL_CD_1_0_0","vinylla","Serato Control CD 1.0.0",null,null],[11,"from","","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","vinylla::bitstream","",1,[[]]],[11,"into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","vinylla::format","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","vinylla::lfsr","",3,[[]]],[11,"into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","vinylla::timecode","",4,[[]]],[11,"into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","vinylla::util","",7,[[]]],[11,"into","","",7,[[]]],[11,"to_owned","","",7,[[]]],[11,"clone_into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"clone","vinylla::format","",2,[[],["timecodeformat",3]]],[11,"clone","vinylla::timecode","",5,[[],["wavecyclestatus",4]]],[11,"clone","","",6,[[],["timecodedirection",4]]],[11,"clone","vinylla::util","",7,[[],["exponentialweightedmovingaverage",3]]],[11,"eq","vinylla::format","",2,[[["timecodeformat",3]]]],[11,"ne","","",2,[[["timecodeformat",3]]]],[11,"eq","vinylla::timecode","",5,[[["wavecyclestatus",4]]]],[11,"eq","","",6,[[["timecodedirection",4]]]],[11,"eq","vinylla::util","",7,[[["exponentialweightedmovingaverage",3]]]],[11,"ne","","",7,[[["exponentialweightedmovingaverage",3]]]],[11,"fmt","vinylla::bitstream","",1,[[["formatter",3]],["result",6]]],[11,"fmt","vinylla::format","",2,[[["formatter",3]],["result",6]]],[11,"fmt","vinylla::timecode","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",4,[[["formatter",3]],["result",6]]],[11,"fmt","vinylla","",0,[[["formatter",3]],["result",6]]],[11,"fmt","vinylla::util","",7,[[["formatter",3]],["result",6]]]],"p":[[3,"Timecode"],[3,"Bitstream"],[3,"TimecodeFormat"],[3,"FibonacciLfsr"],[3,"TimecodeChannel"],[4,"WaveCycleStatus"],[4,"TimecodeDirection"],[3,"ExponentialWeightedMovingAverage"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);