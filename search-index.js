var searchIndex = JSON.parse('{\
"vinylla":{"doc":"","i":[[0,"bits","vinylla","Low level bitwise operations",null,null],[5,"mask","vinylla::bits","Return 2^size - 1 that can be used as a bitmask",null,[[]]],[5,"insert_msb","","Shift all bits in <code>size</code>-bit integer <code>data</code> to the right and …",null,[[]]],[5,"insert_lsb","","Shift all bits in <code>size</code>-bit integer <code>data</code> to the left and …",null,[[]]],[5,"rotate_left","","Shift all bits in <code>size</code>-bit integer <code>data</code> to the left and …",null,[[]]],[5,"rotate_right","","Shift all bits in <code>size</code>-bit integer <code>data</code> to the right and …",null,[[]]],[0,"bitstream","vinylla","The <code>Bitstream</code> struct processes bits and maps them to …",null,null],[3,"Bitstream","vinylla::bitstream","Maps a bitstream to a position in the underlying lookup …",null,null],[12,"lookup_table","","",0,null],[12,"size","","",0,null],[12,"bitstream","","",0,null],[12,"valid_bits","","",0,null],[11,"new","","Create a timecode bitstream using a LFSR with length …",0,[[]]],[11,"process_bit","","Process a single bit in forwards direction.",0,[[]]],[11,"process_bit_backward","","Process a single bit in backwards direction.",0,[[]]],[11,"is_valid","","Returns <code>true</code> if the position is considered valid.",0,[[]]],[11,"state","","Returns the current state of the bitstream",0,[[]]],[11,"set_state","","",0,[[]]],[11,"position","","Retrieve the Position from the current bitstream.",0,[[],["option",4]]],[0,"format","vinylla","",null,null],[3,"TimecodeFormat","vinylla::format","",null,null],[12,"size","","",1,null],[12,"seed","","",1,null],[12,"taps","","",1,null],[12,"signal_frequency_hz","","",1,null],[17,"SERATO_CONTROL_CD_1_0_0","","Serato Control CD 1.0.0",null,null],[0,"generator","vinylla","",null,null],[3,"TimecodeAudioGenerator","vinylla::generator","",null,null],[12,"lfsr","","",2,null],[12,"sample_rate_hz","","",2,null],[12,"signal_frequency_hz","","",2,null],[12,"previous_bit","","",2,null],[12,"cycle_index","","",2,null],[12,"index","","",2,null],[11,"new","","",2,[[["timecodeformat",3]]]],[18,"SCALE_FACTOR_ZERO","","",2,null],[11,"scale_sample","","",2,[[]]],[11,"sample_from_cycle","","",2,[[]]],[11,"next_sample","","",2,[[]]],[11,"state","","",2,[[]]],[0,"lfsr","vinylla","Implementation of a Fibonacci Linear Feedback Shift …",null,null],[3,"FibonacciLfsr","vinylla::lfsr","Fibonacci Linear Feedback Shift Register (LFSR)",null,null],[12,"size","","",3,null],[12,"state","","",3,null],[12,"taps","","",3,null],[11,"next_state","","Return the next LFSR state (without making any changes).",3,[[]]],[11,"previous_state","","Return the previous LFSR state (without making any …",3,[[]]],[11,"advance","","Advance the LFSR state and return it.",3,[[]]],[11,"revert","","Revert the LFSR state and return it.",3,[[]]],[0,"pitch","vinylla","",null,null],[3,"PitchDetector","vinylla::pitch","",null,null],[12,"samples_per_quarter_cycle","","",4,null],[12,"samples_since_last_quarter_cycle","","",4,null],[12,"last_primary_sample","","",4,null],[12,"last_secondary_sample","","",4,null],[11,"new","","",4,[[]]],[11,"update","","",4,[[]]],[11,"update_after_zero_crossing","","",4,[[]]],[0,"timecode","vinylla","",null,null],[4,"WaveCycleStatus","vinylla::timecode","",null,null],[13,"Positive","","",5,null],[13,"Negative","","",5,null],[4,"TimecodeDirection","","",null,null],[13,"Forwards","","",6,null],[13,"Backwards","","",6,null],[3,"TimecodeChannel","","",null,null],[12,"ewma","","",7,null],[12,"wave_cycle_status","","",7,null],[12,"peak_threshold","","",7,null],[17,"TIME_CONSTANT","","",null,null],[5,"sample_to_i32","","",null,[[]]],[18,"INITIAL_PEAK_THRESHOLD","","",7,null],[11,"new","","",7,[[]]],[11,"has_crossed_zero","","Returns true if the wave has crossed zero.",7,[[]]],[11,"process_sample","","Process a sample and detect zero crossing.",7,[[]]],[11,"bit_from_sample","","Reads a bit from the sample and adjust the threshold.",7,[[]]],[3,"Timecode","","",null,null],[12,"bitstream","","",8,null],[12,"primary_channel","","",8,null],[12,"secondary_channel","","",8,null],[12,"direction","","",8,null],[12,"pitch","","",8,null],[11,"new","","",8,[[["timecodeformat",3]]]],[11,"state","","Returns the current state of the bitstream",8,[[]]],[11,"set_state","","",8,[[]]],[11,"process_channels","","",8,[[],["option",4]]],[0,"util","vinylla","Helper Utilities",null,null],[3,"ExponentialWeightedMovingAverage","vinylla::util","Discrete-time implementation of a simple RC low-pass …",null,null],[12,"last_output","","The smoothed last output.",9,null],[12,"smoothing_factor","","The smoothing factor (commonly named α in literature). …",9,null],[11,"new","","",9,[[]]],[11,"calculate_smoothing_factor","","Calculate the smoothing factor.",9,[[]]],[11,"difference_to","","Calculate the difference between the current input and …",9,[[]]],[11,"smoothen","","Calculate the next smoothed value.",9,[[]]],[11,"process","","Calculate the next smoothed value and store it.",9,[[]]],[0,"visualizer","vinylla","",null,null],[3,"Visualizer","vinylla::visualizer","",null,null],[12,"size","","",10,null],[12,"half_size","","",10,null],[12,"samples_drawn","","",10,null],[12,"decay_interval","","",10,null],[12,"decay_factor","","",10,null],[18,"DECAY_INTERVAL","","",10,null],[18,"DECAY_FACTOR","","",10,null],[11,"new","","",10,[[]]],[11,"decay","","",10,[[]]],[11,"normalize_sample_to_size","","",10,[[]]],[11,"coordinate_to_index","","",10,[[]]],[11,"draw_sample","","",10,[[]]],[17,"SERATO_CONTROL_CD_1_0_0","vinylla","Serato Control CD 1.0.0",null,null],[3,"TimecodeAudioGenerator","","",null,null],[12,"lfsr","","",2,null],[12,"sample_rate_hz","","",2,null],[12,"signal_frequency_hz","","",2,null],[12,"previous_bit","","",2,null],[12,"cycle_index","","",2,null],[12,"index","","",2,null],[3,"Timecode","","",null,null],[12,"bitstream","","",8,null],[12,"primary_channel","","",8,null],[12,"secondary_channel","","",8,null],[12,"direction","","",8,null],[12,"pitch","","",8,null],[3,"Visualizer","","",null,null],[12,"size","","",10,null],[12,"half_size","","",10,null],[12,"samples_drawn","","",10,null],[12,"decay_interval","","",10,null],[12,"decay_factor","","",10,null],[11,"from","vinylla::bitstream","",0,[[]]],[11,"into","","",0,[[]]],[11,"borrow","","",0,[[]]],[11,"borrow_mut","","",0,[[]]],[11,"try_from","","",0,[[],["result",4]]],[11,"try_into","","",0,[[],["result",4]]],[11,"type_id","","",0,[[],["typeid",3]]],[11,"from","vinylla::format","",1,[[]]],[11,"into","","",1,[[]]],[11,"to_owned","","",1,[[]]],[11,"clone_into","","",1,[[]]],[11,"borrow","","",1,[[]]],[11,"borrow_mut","","",1,[[]]],[11,"try_from","","",1,[[],["result",4]]],[11,"try_into","","",1,[[],["result",4]]],[11,"type_id","","",1,[[],["typeid",3]]],[11,"from","vinylla::generator","",2,[[]]],[11,"into","","",2,[[]]],[11,"to_owned","","",2,[[]]],[11,"clone_into","","",2,[[]]],[11,"borrow","","",2,[[]]],[11,"borrow_mut","","",2,[[]]],[11,"try_from","","",2,[[],["result",4]]],[11,"try_into","","",2,[[],["result",4]]],[11,"type_id","","",2,[[],["typeid",3]]],[11,"from","vinylla::lfsr","",3,[[]]],[11,"into","","",3,[[]]],[11,"to_owned","","",3,[[]]],[11,"clone_into","","",3,[[]]],[11,"borrow","","",3,[[]]],[11,"borrow_mut","","",3,[[]]],[11,"try_from","","",3,[[],["result",4]]],[11,"try_into","","",3,[[],["result",4]]],[11,"type_id","","",3,[[],["typeid",3]]],[11,"from","vinylla::pitch","",4,[[]]],[11,"into","","",4,[[]]],[11,"to_owned","","",4,[[]]],[11,"clone_into","","",4,[[]]],[11,"borrow","","",4,[[]]],[11,"borrow_mut","","",4,[[]]],[11,"try_from","","",4,[[],["result",4]]],[11,"try_into","","",4,[[],["result",4]]],[11,"type_id","","",4,[[],["typeid",3]]],[11,"from","vinylla::timecode","",5,[[]]],[11,"into","","",5,[[]]],[11,"to_owned","","",5,[[]]],[11,"clone_into","","",5,[[]]],[11,"borrow","","",5,[[]]],[11,"borrow_mut","","",5,[[]]],[11,"try_from","","",5,[[],["result",4]]],[11,"try_into","","",5,[[],["result",4]]],[11,"type_id","","",5,[[],["typeid",3]]],[11,"from","","",6,[[]]],[11,"into","","",6,[[]]],[11,"to_owned","","",6,[[]]],[11,"clone_into","","",6,[[]]],[11,"borrow","","",6,[[]]],[11,"borrow_mut","","",6,[[]]],[11,"try_from","","",6,[[],["result",4]]],[11,"try_into","","",6,[[],["result",4]]],[11,"type_id","","",6,[[],["typeid",3]]],[11,"from","","",7,[[]]],[11,"into","","",7,[[]]],[11,"borrow","","",7,[[]]],[11,"borrow_mut","","",7,[[]]],[11,"try_from","","",7,[[],["result",4]]],[11,"try_into","","",7,[[],["result",4]]],[11,"type_id","","",7,[[],["typeid",3]]],[11,"from","","",8,[[]]],[11,"into","","",8,[[]]],[11,"borrow","","",8,[[]]],[11,"borrow_mut","","",8,[[]]],[11,"try_from","","",8,[[],["result",4]]],[11,"try_into","","",8,[[],["result",4]]],[11,"type_id","","",8,[[],["typeid",3]]],[11,"from","vinylla::util","",9,[[]]],[11,"into","","",9,[[]]],[11,"to_owned","","",9,[[]]],[11,"clone_into","","",9,[[]]],[11,"borrow","","",9,[[]]],[11,"borrow_mut","","",9,[[]]],[11,"try_from","","",9,[[],["result",4]]],[11,"try_into","","",9,[[],["result",4]]],[11,"type_id","","",9,[[],["typeid",3]]],[11,"from","vinylla::visualizer","",10,[[]]],[11,"into","","",10,[[]]],[11,"borrow","","",10,[[]]],[11,"borrow_mut","","",10,[[]]],[11,"try_from","","",10,[[],["result",4]]],[11,"try_into","","",10,[[],["result",4]]],[11,"type_id","","",10,[[],["typeid",3]]],[11,"clone","vinylla::format","",1,[[],["timecodeformat",3]]],[11,"clone","vinylla::generator","",2,[[],["timecodeaudiogenerator",3]]],[11,"clone","vinylla::lfsr","",3,[[],["fibonaccilfsr",3]]],[11,"clone","vinylla::pitch","",4,[[],["pitchdetector",3]]],[11,"clone","vinylla::timecode","",5,[[],["wavecyclestatus",4]]],[11,"clone","","",6,[[],["timecodedirection",4]]],[11,"clone","vinylla::util","",9,[[],["exponentialweightedmovingaverage",3]]],[11,"eq","vinylla::format","",1,[[["timecodeformat",3]]]],[11,"ne","","",1,[[["timecodeformat",3]]]],[11,"eq","vinylla::generator","",2,[[["timecodeaudiogenerator",3]]]],[11,"ne","","",2,[[["timecodeaudiogenerator",3]]]],[11,"eq","vinylla::lfsr","",3,[[["fibonaccilfsr",3]]]],[11,"ne","","",3,[[["fibonaccilfsr",3]]]],[11,"eq","vinylla::timecode","",5,[[["wavecyclestatus",4]]]],[11,"eq","","",6,[[["timecodedirection",4]]]],[11,"eq","vinylla::util","",9,[[["exponentialweightedmovingaverage",3]]]],[11,"ne","","",9,[[["exponentialweightedmovingaverage",3]]]],[11,"fmt","vinylla::bitstream","",0,[[["formatter",3]],["result",6]]],[11,"fmt","vinylla::format","",1,[[["formatter",3]],["result",6]]],[11,"fmt","vinylla::generator","",2,[[["formatter",3]],["result",6]]],[11,"fmt","vinylla::lfsr","",3,[[["formatter",3]],["result",6]]],[11,"fmt","vinylla::pitch","",4,[[["formatter",3]],["result",6]]],[11,"fmt","vinylla::timecode","",5,[[["formatter",3]],["result",6]]],[11,"fmt","","",6,[[["formatter",3]],["result",6]]],[11,"fmt","","",7,[[["formatter",3]],["result",6]]],[11,"fmt","","",8,[[["formatter",3]],["result",6]]],[11,"fmt","vinylla::util","",9,[[["formatter",3]],["result",6]]],[11,"fmt","vinylla::visualizer","",10,[[["formatter",3]],["result",6]]]],"p":[[3,"Bitstream"],[3,"TimecodeFormat"],[3,"TimecodeAudioGenerator"],[3,"FibonacciLfsr"],[3,"PitchDetector"],[4,"WaveCycleStatus"],[4,"TimecodeDirection"],[3,"TimecodeChannel"],[3,"Timecode"],[3,"ExponentialWeightedMovingAverage"],[3,"Visualizer"]]}\
}');
addSearchOptions(searchIndex);initSearch(searchIndex);